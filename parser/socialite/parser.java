
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 05 14:40:37 CET 2014
//----------------------------------------------------

package socialite;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 05 14:40:37 CET 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\004\000\002\003" +
    "\014\000\002\003\006\000\002\003\010\000\002\004\002" +
    "\000\002\004\004\000\002\005\002\000\002\005\005\000" +
    "\002\006\004\000\002\007\002\000\002\007\003\000\002" +
    "\007\005\000\002\010\003\000\002\010\003\000\002\011" +
    "\005\000\002\012\005\000\002\013\004\000\002\014\003" +
    "\000\002\014\005\000\002\015\002\000\002\015\004\000" +
    "\002\016\003\000\002\016\003\000\002\017\003\000\002" +
    "\017\003\000\002\020\003\000\002\020\005\000\002\021" +
    "\003\000\002\021\003\000\002\021\006\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\023\003\000\002\023\005\000\002" +
    "\024\003\000\002\025\003\000\002\026\006\000\002\026" +
    "\003\000\002\027\006\000\002\030\005\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\032\005\000\002\032\005\000\002" +
    "\032\003\000\002\033\005\000\002\033\005\000\002\033" +
    "\003\000\002\034\003\000\002\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\012\002\ufffc\030\ufffc\031\ufffc\036\ufffc\001" +
    "\002\000\004\002\145\001\002\000\012\002\uffed\030\010" +
    "\031\007\036\uffed\001\002\000\012\002\ufffb\030\ufffb\031" +
    "\ufffb\036\ufffb\001\002\000\004\036\117\001\002\000\006" +
    "\032\110\033\112\001\002\000\006\002\000\036\016\001" +
    "\002\000\004\015\047\001\002\000\012\007\uffea\013\uffea" +
    "\015\uffea\016\uffea\001\002\000\014\007\uffeb\011\031\013" +
    "\uffeb\015\uffeb\016\uffeb\001\002\000\006\002\uffec\036\uffec" +
    "\001\002\000\010\004\017\011\uffd8\015\uffd8\001\002\000" +
    "\014\017\027\034\022\035\026\036\025\037\023\001\002" +
    "\000\004\006\030\001\002\000\040\006\uffe1\007\uffe1\010" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\016\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\001" +
    "\002\000\040\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\001\002\000\042\005\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\012\uffdb\013\uffdb\014\uffdb\016" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\001\002\000\040\006\uffdf\007\uffdf\010" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\016\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\001" +
    "\002\000\040\006\uffda\007\uffda\010\uffda\012\uffda\013\uffda" +
    "\014\uffda\016\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\001\002\000\040\006\uffe0" +
    "\007\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\016\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\001\002\000\040\006\uffde\007\uffde\010\uffde\012" +
    "\uffde\013\uffde\014\uffde\016\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\001\002\000" +
    "\016\007\uffd9\011\uffd9\012\uffd9\013\uffd9\015\uffd9\016\uffd9" +
    "\001\002\000\016\017\027\034\022\035\026\036\033\037" +
    "\023\040\037\001\002\000\004\012\045\001\002\000\040" +
    "\004\017\007\uffd8\010\uffda\011\uffd8\012\uffda\013\uffda\016" +
    "\uffd8\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\001\002\000\006\012\uffe4\013\uffe4\001" +
    "\002\000\006\012\uffdd\013\043\001\002\000\006\012\uffe5" +
    "\013\uffe5\001\002\000\004\011\040\001\002\000\016\017" +
    "\027\034\022\035\026\036\033\037\023\040\037\001\002" +
    "\000\004\012\042\001\002\000\006\012\uffe3\013\uffe3\001" +
    "\002\000\016\017\027\034\022\035\026\036\033\037\023" +
    "\040\037\001\002\000\004\012\uffdc\001\002\000\012\007" +
    "\uffd7\013\uffd7\015\uffd7\016\uffd7\001\002\000\004\007\107" +
    "\001\002\000\016\011\056\017\027\034\022\035\026\036" +
    "\033\037\023\001\002\000\006\007\uffef\016\051\001\002" +
    "\000\004\015\047\001\002\000\004\007\uffee\001\002\000" +
    "\010\007\uffe9\013\uffe9\016\uffe9\001\002\000\010\007\uffe8" +
    "\013\uffe8\016\uffe8\001\002\000\006\007\ufff0\016\ufff0\001" +
    "\002\000\016\011\056\017\027\034\022\035\026\036\025" +
    "\037\023\001\002\000\020\010\072\020\101\021\100\022" +
    "\077\023\076\024\075\025\074\001\002\000\040\006\uffcb" +
    "\007\uffcb\010\uffcb\012\uffcb\013\uffcb\014\uffcb\016\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\001\002\000\040\006\uffce\007\uffce\010\uffce\012" +
    "\uffce\013\uffce\014\uffce\016\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\067\027\066\001\002\000" +
    "\010\007\uffe7\013\064\016\uffe7\001\002\000\040\006\uffca" +
    "\007\uffca\010\uffca\012\uffca\013\uffca\014\uffca\016\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\001\002\000\016\011\056\017\027\034\022\035" +
    "\026\036\033\037\023\001\002\000\006\007\uffe6\016\uffe6" +
    "\001\002\000\016\011\056\017\027\034\022\035\026\036" +
    "\025\037\023\001\002\000\016\011\056\017\027\034\022" +
    "\035\026\036\025\037\023\001\002\000\040\006\uffcd\007" +
    "\uffcd\010\uffcd\012\uffcd\013\uffcd\014\uffcd\016\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\001\002\000\040\006\uffcc\007\uffcc\010\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\016\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\001\002\000\016" +
    "\011\uffd5\017\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\001" +
    "\002\000\016\011\056\017\027\034\022\035\026\036\025" +
    "\037\023\001\002\000\016\011\056\017\027\034\022\035" +
    "\026\036\025\037\023\001\002\000\016\011\056\017\027" +
    "\034\022\035\026\036\025\037\023\001\002\000\016\011" +
    "\uffd1\017\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\001\002" +
    "\000\016\011\uffd2\017\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\001\002\000\016\011\uffd3\017\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\001\002\000\016\011\uffd4\017\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\001\002\000\040\006\uffd0" +
    "\007\uffd0\010\uffd0\012\uffd0\013\uffd0\014\uffd0\016\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\067" +
    "\027\066\001\002\000\040\006\uffcf\007\uffcf\010\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\016\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\026\067\027\066\001\002\000" +
    "\014\007\uffd6\013\uffd6\016\uffd6\024\075\025\074\001\002" +
    "\000\010\012\106\024\075\025\074\001\002\000\040\006" +
    "\uffc9\007\uffc9\010\uffc9\012\uffc9\013\uffc9\014\uffc9\016\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\001\002\000\006\002\ufff1\036\ufff1\001\002" +
    "\000\006\036\ufff3\037\ufff3\001\002\000\004\036\113\001" +
    "\002\000\006\036\ufff4\037\ufff4\001\002\000\004\010\114" +
    "\001\002\000\016\011\056\017\027\034\022\035\026\036" +
    "\025\037\023\001\002\000\010\007\116\024\075\025\074" +
    "\001\002\000\012\002\ufffd\030\ufffd\031\ufffd\036\ufffd\001" +
    "\002\000\010\004\121\007\ufffa\011\122\001\002\000\004" +
    "\007\144\001\002\000\006\032\110\033\112\001\002\000" +
    "\010\012\ufff7\032\110\033\112\001\002\000\006\012\ufff6" +
    "\013\130\001\002\000\004\037\023\001\002\000\004\012" +
    "\126\001\002\000\004\007\ufff9\001\002\000\006\012\ufff8" +
    "\013\ufff8\001\002\000\010\012\ufff7\032\110\033\112\001" +
    "\002\000\004\012\ufff5\001\002\000\004\037\023\001\002" +
    "\000\004\005\134\001\002\000\016\011\056\017\027\034" +
    "\022\035\026\036\025\037\023\001\002\000\004\006\141" +
    "\001\002\000\010\014\137\024\075\025\074\001\002\000" +
    "\016\011\056\017\027\034\022\035\026\036\025\037\023" +
    "\001\002\000\010\006\ufff2\024\075\025\074\001\002\000" +
    "\006\007\ufffa\011\122\001\002\000\004\007\143\001\002" +
    "\000\012\002\uffff\030\uffff\031\uffff\036\uffff\001\002\000" +
    "\012\002\ufffe\030\ufffe\031\ufffe\036\ufffe\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\006\003\005\015\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\110\001\001\000\012\012" +
    "\014\016\011\026\013\027\012\001\001\000\006\013\047" +
    "\014\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\017\024\020" +
    "\025\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\021\034\022\033\023\031\024\020\025\023" +
    "\026\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\021\034\022\033\023\040\024\020\025" +
    "\023\026\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\021\034\022\033\023\043\024\020\025\023\026" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\016\052\017\061\020\054\022\062\024" +
    "\020\025\023\026\013\027\012\030\053\032\056\033\060" +
    "\034\057\001\001\000\002\001\001\000\006\013\047\014" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\022\062\024\020\025" +
    "\023\032\104\033\060\034\057\001\001\000\004\031\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\016\052\017\061\020\064" +
    "\022\062\024\020\025\023\026\013\027\012\030\053\032" +
    "\056\033\060\034\057\001\001\000\002\001\001\000\012" +
    "\022\062\024\020\025\023\034\070\001\001\000\012\022" +
    "\062\024\020\025\023\034\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\022\062\024" +
    "\020\025\023\032\103\033\060\034\057\001\001\000\014" +
    "\022\062\024\020\025\023\033\102\034\057\001\001\000" +
    "\014\022\062\024\020\025\023\033\101\034\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\022\062\024\020\025\023\032" +
    "\114\033\060\034\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\117\001\001\000\002\001\001\000" +
    "\004\010\131\001\001\000\010\006\122\007\124\010\123" +
    "\001\001\000\002\001\001\000\004\024\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\122\007\130\010\123\001\001\000\002\001\001\000" +
    "\004\024\132\001\001\000\002\001\001\000\020\011\134" +
    "\022\062\024\020\025\023\032\135\033\060\034\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\022\062" +
    "\024\020\025\023\032\137\033\060\034\057\001\001\000" +
    "\002\001\001\000\004\005\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public socialite.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (socialite.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Exp2 ::= _SYMB_5 Exp _SYMB_6 
            {
              socialite.Absyn.Exp RESULT =null;
		socialite.Absyn.Exp p_2 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Exp2 ::= Value 
            {
              socialite.Absyn.Exp RESULT =null;
		socialite.Absyn.Value p_1 = (socialite.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.EInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exp1 ::= Exp2 
            {
              socialite.Absyn.Exp RESULT =null;
		socialite.Absyn.Exp p_1 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exp1 ::= Exp1 _SYMB_19 Exp2 
            {
              socialite.Absyn.Exp RESULT =null;
		socialite.Absyn.Exp p_1 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.Exp p_3 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.EDiv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Exp1 ::= Exp1 _SYMB_18 Exp2 
            {
              socialite.Absyn.Exp RESULT =null;
		socialite.Absyn.Exp p_1 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.Exp p_3 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.EMul(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exp ::= Exp1 
            {
              socialite.Absyn.Exp RESULT =null;
		socialite.Absyn.Exp p_1 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exp ::= Exp _SYMB_17 Exp1 
            {
              socialite.Absyn.Exp RESULT =null;
		socialite.Absyn.Exp p_1 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.Exp p_3 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ESub(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Exp ::= Exp _SYMB_16 Exp1 
            {
              socialite.Absyn.Exp RESULT =null;
		socialite.Absyn.Exp p_1 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.Exp p_3 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.EAdd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CompOp ::= _SYMB_15 
            {
              socialite.Absyn.CompOp RESULT =null;
		 RESULT = new socialite.Absyn.CompOpLe(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompOp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CompOp ::= _SYMB_14 
            {
              socialite.Absyn.CompOp RESULT =null;
		 RESULT = new socialite.Absyn.CompOpGe(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompOp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CompOp ::= _SYMB_13 
            {
              socialite.Absyn.CompOp RESULT =null;
		 RESULT = new socialite.Absyn.CompOpLt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompOp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CompOp ::= _SYMB_12 
            {
              socialite.Absyn.CompOp RESULT =null;
		 RESULT = new socialite.Absyn.CompOpGt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompOp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CompOp ::= _SYMB_4 
            {
              socialite.Absyn.CompOp RESULT =null;
		 RESULT = new socialite.Absyn.CompOpEq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompOp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Equation ::= Exp CompOp Exp 
            {
              socialite.Absyn.Equation RESULT =null;
		socialite.Absyn.Exp p_1 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.CompOp p_2 = (socialite.Absyn.CompOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		socialite.Absyn.Exp p_3 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.Comparison(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Equation",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Structure ::= Atom _SYMB_5 ListTerm _SYMB_6 
            {
              socialite.Absyn.Structure RESULT =null;
		socialite.Absyn.Atom p_1 = (socialite.Absyn.Atom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		socialite.Absyn.ListTerm p_3 = (socialite.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new socialite.Absyn.Struct(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Structure",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Atom ::= UIdent 
            {
              socialite.Absyn.Atom RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.AtomSingle(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Atom",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Atom ::= UIdent _SYMB_0 Value _SYMB_2 
            {
              socialite.Absyn.Atom RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		socialite.Absyn.Value p_3 = (socialite.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new socialite.Absyn.AtomSharded(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Atom",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Constant ::= UIdent 
            {
              socialite.Absyn.Constant RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.Const(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Variable ::= LIdent 
            {
              socialite.Absyn.Variable RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.Var(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ListTerm ::= Term _SYMB_7 ListTerm 
            {
              socialite.Absyn.ListTerm RESULT =null;
		socialite.Absyn.Term p_1 = (socialite.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.ListTerm p_3 = (socialite.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTerm",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ListTerm ::= Term 
            {
              socialite.Absyn.ListTerm RESULT =null;
		socialite.Absyn.Term p_1 = (socialite.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ListTerm(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTerm",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Value ::= _SYMB_11 
            {
              socialite.Absyn.Value RESULT =null;
		 RESULT = new socialite.Absyn.ValueIgnore(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Value ::= Constant 
            {
              socialite.Absyn.Value RESULT =null;
		socialite.Absyn.Constant p_1 = (socialite.Absyn.Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ValueConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Value ::= _DOUBLE_ 
            {
              socialite.Absyn.Value RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ValueDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Value ::= Variable 
            {
              socialite.Absyn.Value RESULT =null;
		socialite.Absyn.Variable p_1 = (socialite.Absyn.Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ValueVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Value ::= _INTEGER_ 
            {
              socialite.Absyn.Value RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ValueInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Term ::= DIdent _SYMB_5 ListTerm _SYMB_6 
            {
              socialite.Absyn.Term RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		socialite.Absyn.ListTerm p_3 = (socialite.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new socialite.Absyn.TermCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Term ::= Value 
            {
              socialite.Absyn.Term RESULT =null;
		socialite.Absyn.Value p_1 = (socialite.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.TermValue(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Term ::= Atom 
            {
              socialite.Absyn.Term RESULT =null;
		socialite.Absyn.Atom p_1 = (socialite.Absyn.Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.TermAtom(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListOneGoal ::= OneGoal _SYMB_7 ListOneGoal 
            {
              socialite.Absyn.ListOneGoal RESULT =null;
		socialite.Absyn.OneGoal p_1 = (socialite.Absyn.OneGoal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.ListOneGoal p_3 = (socialite.Absyn.ListOneGoal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOneGoal",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListOneGoal ::= OneGoal 
            {
              socialite.Absyn.ListOneGoal RESULT =null;
		socialite.Absyn.OneGoal p_1 = (socialite.Absyn.OneGoal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ListOneGoal(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListOneGoal",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OneGoal ::= Equation 
            {
              socialite.Absyn.OneGoal RESULT =null;
		socialite.Absyn.Equation p_1 = (socialite.Absyn.Equation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.GoalEquation(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OneGoal",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OneGoal ::= Predicate 
            {
              socialite.Absyn.OneGoal RESULT =null;
		socialite.Absyn.Predicate p_1 = (socialite.Absyn.Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.GoalPredicate(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OneGoal",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Predicate ::= Structure 
            {
              socialite.Absyn.Predicate RESULT =null;
		socialite.Absyn.Structure p_1 = (socialite.Absyn.Structure)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.PredicateStruct(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Predicate",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Predicate ::= Atom 
            {
              socialite.Absyn.Predicate RESULT =null;
		socialite.Absyn.Atom p_1 = (socialite.Absyn.Atom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.PredicateAtom(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Predicate",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ListRule ::= ListRule Rule 
            {
              socialite.Absyn.ListRule RESULT =null;
		socialite.Absyn.ListRule p_1 = (socialite.Absyn.ListRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		socialite.Absyn.Rule p_2 = (socialite.Absyn.Rule)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListRule",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ListRule ::= 
            {
              socialite.Absyn.ListRule RESULT =null;
		 RESULT = new socialite.Absyn.ListRule(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListRule",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListRuleGoal ::= RuleGoal _SYMB_10 ListRuleGoal 
            {
              socialite.Absyn.ListRuleGoal RESULT =null;
		socialite.Absyn.RuleGoal p_1 = (socialite.Absyn.RuleGoal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.ListRuleGoal p_3 = (socialite.Absyn.ListRuleGoal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListRuleGoal",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ListRuleGoal ::= RuleGoal 
            {
              socialite.Absyn.ListRuleGoal RESULT =null;
		socialite.Absyn.RuleGoal p_1 = (socialite.Absyn.RuleGoal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ListRuleGoal(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListRuleGoal",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RuleGoal ::= _SYMB_9 ListOneGoal 
            {
              socialite.Absyn.RuleGoal RESULT =null;
		socialite.Absyn.ListOneGoal p_2 = (socialite.Absyn.ListOneGoal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.RuleGoalDef(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RuleGoal",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Rule ::= Predicate ListRuleGoal _SYMB_3 
            {
              socialite.Absyn.Rule RESULT =null;
		socialite.Absyn.Predicate p_1 = (socialite.Absyn.Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.ListRuleGoal p_2 = (socialite.Absyn.ListRuleGoal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new socialite.Absyn.RuleDef(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Rule",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Range ::= Exp _SYMB_8 Exp 
            {
              socialite.Absyn.Range RESULT =null;
		socialite.Absyn.Exp p_1 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.Exp p_3 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.RangeDef(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Range",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TypeName ::= _SYMB_22 
            {
              socialite.Absyn.TypeName RESULT =null;
		 RESULT = new socialite.Absyn.TypeDouble(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeName",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeName ::= _SYMB_23 
            {
              socialite.Absyn.TypeName RESULT =null;
		 RESULT = new socialite.Absyn.TypeInt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeName",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ListColumnDeclaration ::= ColumnDeclaration _SYMB_7 ListColumnDeclaration 
            {
              socialite.Absyn.ListColumnDeclaration RESULT =null;
		socialite.Absyn.ColumnDeclaration p_1 = (socialite.Absyn.ColumnDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.ListColumnDeclaration p_3 = (socialite.Absyn.ListColumnDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListColumnDeclaration",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListColumnDeclaration ::= ColumnDeclaration 
            {
              socialite.Absyn.ListColumnDeclaration RESULT =null;
		socialite.Absyn.ColumnDeclaration p_1 = (socialite.Absyn.ColumnDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ListColumnDeclaration(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListColumnDeclaration",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListColumnDeclaration ::= 
            {
              socialite.Absyn.ListColumnDeclaration RESULT =null;
		 RESULT = new socialite.Absyn.ListColumnDeclaration(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListColumnDeclaration",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ColumnDeclaration ::= TypeName Variable 
            {
              socialite.Absyn.ColumnDeclaration RESULT =null;
		socialite.Absyn.TypeName p_1 = (socialite.Absyn.TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		socialite.Absyn.Variable p_2 = (socialite.Absyn.Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ColumnDecl(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ColumnDeclaration",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MoreDimensionsDeclaration ::= _SYMB_5 ListColumnDeclaration _SYMB_6 
            {
              socialite.Absyn.MoreDimensionsDeclaration RESULT =null;
		socialite.Absyn.ListColumnDeclaration p_2 = (socialite.Absyn.ListColumnDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new socialite.Absyn.MoreDim(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MoreDimensionsDeclaration",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MoreDimensionsDeclaration ::= 
            {
              socialite.Absyn.MoreDimensionsDeclaration RESULT =null;
		 RESULT = new socialite.Absyn.NoMoreDim(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MoreDimensionsDeclaration",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListDeclaration ::= ListDeclaration Declaration 
            {
              socialite.Absyn.ListDeclaration RESULT =null;
		socialite.Absyn.ListDeclaration p_1 = (socialite.Absyn.ListDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		socialite.Absyn.Declaration p_2 = (socialite.Absyn.Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDeclaration",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListDeclaration ::= 
            {
              socialite.Absyn.ListDeclaration RESULT =null;
		 RESULT = new socialite.Absyn.ListDeclaration(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDeclaration",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaration ::= _SYMB_20 TypeName UIdent _SYMB_4 Exp _SYMB_3 
            {
              socialite.Absyn.Declaration RESULT =null;
		socialite.Absyn.TypeName p_2 = (socialite.Absyn.TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		socialite.Absyn.Exp p_5 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new socialite.Absyn.DeclarationConst(p_2,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declaration ::= _SYMB_21 UIdent MoreDimensionsDeclaration _SYMB_3 
            {
              socialite.Absyn.Declaration RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.MoreDimensionsDeclaration p_3 = (socialite.Absyn.MoreDimensionsDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new socialite.Absyn.DeclarationGlobal(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Declaration ::= _SYMB_21 UIdent _SYMB_0 TypeName Variable _SYMB_1 Range _SYMB_2 MoreDimensionsDeclaration _SYMB_3 
            {
              socialite.Absyn.Declaration RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		socialite.Absyn.TypeName p_4 = (socialite.Absyn.TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		socialite.Absyn.Variable p_5 = (socialite.Absyn.Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		socialite.Absyn.Range p_7 = (socialite.Absyn.Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		socialite.Absyn.MoreDimensionsDeclaration p_9 = (socialite.Absyn.MoreDimensionsDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new socialite.Absyn.DeclarationDistributed(p_2,p_4,p_5,p_7,p_9); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListDeclaration ListRule 
            {
              socialite.Absyn.Program RESULT =null;
		socialite.Absyn.ListDeclaration p_1 = (socialite.Absyn.ListDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		socialite.Absyn.ListRule p_2 = (socialite.Absyn.ListRule)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.Prog(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		socialite.Absyn.Program start_val = (socialite.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

