// -*- Java -*- This Cup file was machine-generated by BNFC
package socialite;

parser code {:
  public socialite.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (socialite.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal socialite.Absyn.Program Program;
nonterminal socialite.Absyn.Declaration Declaration;
nonterminal socialite.Absyn.ListDeclaration ListDeclaration;
nonterminal socialite.Absyn.MoreDimensionsDeclaration MoreDimensionsDeclaration;
nonterminal socialite.Absyn.ColumnDeclaration ColumnDeclaration;
nonterminal socialite.Absyn.ListColumnDeclaration ListColumnDeclaration;
nonterminal socialite.Absyn.TypeName TypeName;
nonterminal socialite.Absyn.Range Range;
nonterminal socialite.Absyn.Rule Rule;
nonterminal socialite.Absyn.RuleGoal RuleGoal;
nonterminal socialite.Absyn.ListRuleGoal ListRuleGoal;
nonterminal socialite.Absyn.ListRule ListRule;
nonterminal socialite.Absyn.Predicate Predicate;
nonterminal socialite.Absyn.OneGoal OneGoal;
nonterminal socialite.Absyn.ListOneGoal ListOneGoal;
nonterminal socialite.Absyn.Term Term;
nonterminal socialite.Absyn.Value Value;
nonterminal socialite.Absyn.ListTerm ListTerm;
nonterminal socialite.Absyn.Variable Variable;
nonterminal socialite.Absyn.Constant Constant;
nonterminal socialite.Absyn.Atom Atom;
nonterminal socialite.Absyn.Structure Structure;
nonterminal socialite.Absyn.Equation Equation;
nonterminal socialite.Absyn.CompOp CompOp;
nonterminal socialite.Absyn.Exp Exp;
nonterminal socialite.Absyn.Exp Exp1;
nonterminal socialite.Absyn.Exp Exp2;

terminal _SYMB_0;    //   [
terminal _SYMB_1;    //   :
terminal _SYMB_2;    //   ]
terminal _SYMB_3;    //   .
terminal _SYMB_4;    //   =
terminal _SYMB_5;    //   (
terminal _SYMB_6;    //   )
terminal _SYMB_7;    //   ,
terminal _SYMB_8;    //   ..
terminal _SYMB_9;    //   :-
terminal _SYMB_10;    //   ;
terminal _SYMB_11;    //   _
terminal _SYMB_12;    //   >
terminal _SYMB_13;    //   <
terminal _SYMB_14;    //   >=
terminal _SYMB_15;    //   <=
terminal _SYMB_16;    //   +
terminal _SYMB_17;    //   -
terminal _SYMB_18;    //   *
terminal _SYMB_19;    //   /
terminal _SYMB_20;    //   const
terminal _SYMB_21;    //   declare
terminal _SYMB_22;    //   double
terminal _SYMB_23;    //   int



terminal Integer _INTEGER_;
terminal Double _DOUBLE_;


terminal String UIdent;
terminal String LIdent;
terminal String DIdent;


start with Program;


Program ::= ListDeclaration:p_1 ListRule:p_2  {: RESULT = new socialite.Absyn.Prog(p_1,p_2); :} 
;
Declaration ::= _SYMB_21 UIdent:p_2 _SYMB_0 TypeName:p_4 Variable:p_5 _SYMB_1 Range:p_7 _SYMB_2 MoreDimensionsDeclaration:p_9 _SYMB_3  {: RESULT = new socialite.Absyn.DeclarationDistributed(p_2,p_4,p_5,p_7,p_9); :} 
  | _SYMB_21 UIdent:p_2 MoreDimensionsDeclaration:p_3 _SYMB_3  {: RESULT = new socialite.Absyn.DeclarationGlobal(p_2,p_3); :}
  | _SYMB_20 TypeName:p_2 UIdent:p_3 _SYMB_4 Exp:p_5 _SYMB_3  {: RESULT = new socialite.Absyn.DeclarationConst(p_2,p_3,p_5); :}
;
ListDeclaration ::=  /* empty */  {: RESULT = new socialite.Absyn.ListDeclaration(); :} 
  | ListDeclaration:p_1 Declaration:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
MoreDimensionsDeclaration ::=  /* empty */  {: RESULT = new socialite.Absyn.NoMoreDim(); :} 
  | _SYMB_5 ListColumnDeclaration:p_2 _SYMB_6  {: RESULT = new socialite.Absyn.MoreDim(p_2); :}
;
ColumnDeclaration ::= TypeName:p_1 Variable:p_2  {: RESULT = new socialite.Absyn.ColumnDecl(p_1,p_2); :} 
;
ListColumnDeclaration ::=  /* empty */  {: RESULT = new socialite.Absyn.ListColumnDeclaration(); :} 
  | ColumnDeclaration:p_1  {: RESULT = new socialite.Absyn.ListColumnDeclaration(); RESULT.addLast(p_1); :}
  | ColumnDeclaration:p_1 _SYMB_7 ListColumnDeclaration:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
TypeName ::= _SYMB_23  {: RESULT = new socialite.Absyn.TypeInt(); :} 
  | _SYMB_22  {: RESULT = new socialite.Absyn.TypeDouble(); :}
;
Range ::= Exp:p_1 _SYMB_8 Exp:p_3  {: RESULT = new socialite.Absyn.RangeDef(p_1,p_3); :} 
;
Rule ::= Predicate:p_1 ListRuleGoal:p_2 _SYMB_3  {: RESULT = new socialite.Absyn.RuleDef(p_1,p_2); :} 
;
RuleGoal ::= _SYMB_9 ListOneGoal:p_2  {: RESULT = new socialite.Absyn.RuleGoalDef(p_2); :} 
;
ListRuleGoal ::= RuleGoal:p_1  {: RESULT = new socialite.Absyn.ListRuleGoal(); RESULT.addLast(p_1); :} 
  | RuleGoal:p_1 _SYMB_10 ListRuleGoal:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListRule ::=  /* empty */  {: RESULT = new socialite.Absyn.ListRule(); :} 
  | ListRule:p_1 Rule:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Predicate ::= Atom:p_1  {: RESULT = new socialite.Absyn.PredicateAtom(p_1); :} 
  | Structure:p_1  {: RESULT = new socialite.Absyn.PredicateStruct(p_1); :}
;
OneGoal ::= Predicate:p_1  {: RESULT = new socialite.Absyn.GoalPredicate(p_1); :} 
  | Equation:p_1  {: RESULT = new socialite.Absyn.GoalEquation(p_1); :}
;
ListOneGoal ::= OneGoal:p_1  {: RESULT = new socialite.Absyn.ListOneGoal(); RESULT.addLast(p_1); :} 
  | OneGoal:p_1 _SYMB_7 ListOneGoal:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Term ::= Atom:p_1  {: RESULT = new socialite.Absyn.TermAtom(p_1); :} 
  | Value:p_1  {: RESULT = new socialite.Absyn.TermValue(p_1); :}
  | DIdent:p_1 _SYMB_5 ListTerm:p_3 _SYMB_6  {: RESULT = new socialite.Absyn.TermCall(p_1,p_3); :}
;
Value ::= _INTEGER_:p_1  {: RESULT = new socialite.Absyn.ValueInt(p_1); :} 
  | Variable:p_1  {: RESULT = new socialite.Absyn.ValueVar(p_1); :}
  | _DOUBLE_:p_1  {: RESULT = new socialite.Absyn.ValueDouble(p_1); :}
  | Constant:p_1  {: RESULT = new socialite.Absyn.ValueConst(p_1); :}
  | _SYMB_11  {: RESULT = new socialite.Absyn.ValueIgnore(); :}
;
ListTerm ::= Term:p_1  {: RESULT = new socialite.Absyn.ListTerm(); RESULT.addLast(p_1); :} 
  | Term:p_1 _SYMB_7 ListTerm:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Variable ::= LIdent:p_1  {: RESULT = new socialite.Absyn.Var(p_1); :} 
;
Constant ::= UIdent:p_1  {: RESULT = new socialite.Absyn.Const(p_1); :} 
;
Atom ::= UIdent:p_1 _SYMB_0 Value:p_3 _SYMB_2  {: RESULT = new socialite.Absyn.AtomSharded(p_1,p_3); :} 
  | UIdent:p_1  {: RESULT = new socialite.Absyn.AtomSingle(p_1); :}
;
Structure ::= Atom:p_1 _SYMB_5 ListTerm:p_3 _SYMB_6  {: RESULT = new socialite.Absyn.Struct(p_1,p_3); :} 
;
Equation ::= Exp:p_1 CompOp:p_2 Exp:p_3  {: RESULT = new socialite.Absyn.Comparison(p_1,p_2,p_3); :} 
;
CompOp ::= _SYMB_4  {: RESULT = new socialite.Absyn.CompOpEq(); :} 
  | _SYMB_12  {: RESULT = new socialite.Absyn.CompOpGt(); :}
  | _SYMB_13  {: RESULT = new socialite.Absyn.CompOpLt(); :}
  | _SYMB_14  {: RESULT = new socialite.Absyn.CompOpGe(); :}
  | _SYMB_15  {: RESULT = new socialite.Absyn.CompOpLe(); :}
;
Exp ::= Exp:p_1 _SYMB_16 Exp1:p_3  {: RESULT = new socialite.Absyn.EAdd(p_1,p_3); :} 
  | Exp:p_1 _SYMB_17 Exp1:p_3  {: RESULT = new socialite.Absyn.ESub(p_1,p_3); :}
  | Exp1:p_1  {: RESULT = p_1; :}
;
Exp1 ::= Exp1:p_1 _SYMB_18 Exp2:p_3  {: RESULT = new socialite.Absyn.EMul(p_1,p_3); :} 
  | Exp1:p_1 _SYMB_19 Exp2:p_3  {: RESULT = new socialite.Absyn.EDiv(p_1,p_3); :}
  | Exp2:p_1  {: RESULT = p_1; :}
;
Exp2 ::= Value:p_1  {: RESULT = new socialite.Absyn.EInt(p_1); :} 
  | _SYMB_5 Exp:p_2 _SYMB_6  {: RESULT = p_2; :}
;

