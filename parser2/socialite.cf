-- programs ------------------------------------------------

entrypoints Program ;

Prog.       Program ::= [Declaration] [Rule];

-- declarations --------------------------------------------

-- DeclarationDistributed.  Declaration ::= "declare" UIdent "[" TypeName Variable ":" Range "]" MoreDimensionsDeclaration "."; 
DeclarationGlobal.       Declaration ::= "declare" UIdent MoreDimensionsDeclaration ".";
DeclarationConst.        Declaration ::= "const" TypeName UIdent "=" Exp "."; 

separator Declaration "";

NoMoreDim.       MoreDimensionsDeclaration ::= ;
MoreDim.         MoreDimensionsDeclaration ::= "(" [ColumnDeclaration] ")";

ColumnDecl.      ColumnDeclaration ::= TypeName Variable AggregateSpecifier;
separator        ColumnDeclaration ",";

AggregateWith.   AggregateSpecifier ::= "aggregate" Function;
NoAggregation.   AggregateSpecifier ::= ;

TypeInt.         TypeName ::= "int";
TypeDouble.      TypeName ::= "double";

-- RangeDef.        Range ::= Exp ".." Exp; 

-- rules ---------------------------------------------------

RuleDef.             Rule ::= Head [RuleBody] ".";
separator Rule "" ;

HeadSingle.       Head ::= UIdent "(" [Variable] ")";
-- HeadSingle.       Head ::= UIdent "(" [Term] ")";
-- HeadSharded.      Head ::= UIdent "[" Value "]" "(" [Term] ")";

RuleBodyDef.         RuleBody ::= ":-" [Subgoal];
separator nonempty RuleBody ";";


PredicateSingle.     Predicate ::= UIdent "(" [Value] ")";
-- PredicateSharded. Predicate ::= UIdent "[" Value "]" "(" [Value] ")";

GoalPredicate.       Subgoal ::= Predicate;
GoalComparison.      Subgoal ::= Exp CompOp Exp;
GoalAssign.          Subgoal ::= Variable "=" Exp;
separator nonempty Subgoal "," ;

-- TermValue.        Term ::= Value;
-- TermCall.	     Term ::= DIdent "(" Variable ")";
-- separator nonempty Term "," ;

ValueInt.        Value ::= Integer;
ValueVar.        Value ::= Variable;
ValueDouble.	 Value ::= Double;
ValueConst.      Value ::= UIdent;
-- ValueIgnore.     Value ::= "_";
separator nonempty Value "," ;

Var.             Variable ::= LIdent;
separator nonempty Variable "," ;

Func.            Function ::= UIdent;

CompOpEq.        CompOp ::= "==";
CompOpNe.        CompOp ::= "!=";
CompOpGt.        CompOp ::= ">";
CompOpLt.        CompOp ::= "<";
CompOpGe.        CompOp ::= ">=";
CompOpLe.        CompOp ::= "<=";

EAdd.            Exp ::= Exp "+" Exp1;
ESub.            Exp ::= Exp "-" Exp1;
EMul.            Exp1 ::= Exp1 "*" Exp2;
EDiv.            Exp1 ::= Exp1 "/" Exp2;
EValue.          Exp2 ::= Value;
coercions Exp 2;              

token UIdent (upper (letter | digit | '_')*) ;
token LIdent (lower (letter | digit | '_')*) ;
token DIdent '$' (upper (letter | digit | '_')*) ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

