// -*- Java -*- This Cup file was machine-generated by BNFC
package socialite;

parser code {:
  public socialite.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (socialite.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal socialite.Absyn.Program Program;
nonterminal socialite.Absyn.Declaration Declaration;
nonterminal socialite.Absyn.ListDeclaration ListDeclaration;
nonterminal socialite.Absyn.MoreDimensionsDeclaration MoreDimensionsDeclaration;
nonterminal socialite.Absyn.ColumnDeclaration ColumnDeclaration;
nonterminal socialite.Absyn.ListColumnDeclaration ListColumnDeclaration;
nonterminal socialite.Absyn.AggregateSpecifier AggregateSpecifier;
nonterminal socialite.Absyn.TypeName TypeName;
nonterminal socialite.Absyn.Rule Rule;
nonterminal socialite.Absyn.ListRule ListRule;
nonterminal socialite.Absyn.Head Head;
nonterminal socialite.Absyn.RuleBody RuleBody;
nonterminal socialite.Absyn.Predicate Predicate;
nonterminal socialite.Absyn.Subgoal Subgoal;
nonterminal socialite.Absyn.ListSubgoal ListSubgoal;
nonterminal socialite.Absyn.Value Value;
nonterminal socialite.Absyn.ListValue ListValue;
nonterminal socialite.Absyn.Variable Variable;
nonterminal socialite.Absyn.ListVariable ListVariable;
nonterminal socialite.Absyn.Function Function;
nonterminal socialite.Absyn.CompOp CompOp;
nonterminal socialite.Absyn.Exp Exp;
nonterminal socialite.Absyn.Exp Exp1;
nonterminal socialite.Absyn.Exp Exp2;

terminal _SYMB_0;    //   .
terminal _SYMB_1;    //   =
terminal _SYMB_2;    //   (
terminal _SYMB_3;    //   )
terminal _SYMB_4;    //   ,
terminal _SYMB_5;    //   :-
terminal _SYMB_6;    //   ==
terminal _SYMB_7;    //   !=
terminal _SYMB_8;    //   >
terminal _SYMB_9;    //   <
terminal _SYMB_10;    //   >=
terminal _SYMB_11;    //   <=
terminal _SYMB_12;    //   +
terminal _SYMB_13;    //   -
terminal _SYMB_14;    //   *
terminal _SYMB_15;    //   /
terminal _SYMB_16;    //   aggregate
terminal _SYMB_17;    //   const
terminal _SYMB_18;    //   declare
terminal _SYMB_19;    //   int



terminal Integer _INTEGER_;
terminal Double _DOUBLE_;


terminal String UIdent;
terminal String LIdent;
terminal String DIdent;


start with Program;


Program ::= ListDeclaration:p_1 ListRule:p_2  {: RESULT = new socialite.Absyn.Prog(p_1,p_2); :} 
;
Declaration ::= _SYMB_18 UIdent:p_2 MoreDimensionsDeclaration:p_3 _SYMB_0  {: RESULT = new socialite.Absyn.DeclarationGlobal(p_2,p_3); :} 
  | _SYMB_17 TypeName:p_2 UIdent:p_3 _SYMB_1 Exp:p_5 _SYMB_0  {: RESULT = new socialite.Absyn.DeclarationConst(p_2,p_3,p_5); :}
;
ListDeclaration ::=  /* empty */  {: RESULT = new socialite.Absyn.ListDeclaration(); :} 
  | ListDeclaration:p_1 Declaration:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
MoreDimensionsDeclaration ::=  /* empty */  {: RESULT = new socialite.Absyn.NoMoreDim(); :} 
  | _SYMB_2 ListColumnDeclaration:p_2 _SYMB_3  {: RESULT = new socialite.Absyn.MoreDim(p_2); :}
;
ColumnDeclaration ::= TypeName:p_1 Variable:p_2 AggregateSpecifier:p_3  {: RESULT = new socialite.Absyn.ColumnDecl(p_1,p_2,p_3); :} 
;
ListColumnDeclaration ::=  /* empty */  {: RESULT = new socialite.Absyn.ListColumnDeclaration(); :} 
  | ColumnDeclaration:p_1  {: RESULT = new socialite.Absyn.ListColumnDeclaration(); RESULT.addLast(p_1); :}
  | ColumnDeclaration:p_1 _SYMB_4 ListColumnDeclaration:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
AggregateSpecifier ::= _SYMB_16 Function:p_2  {: RESULT = new socialite.Absyn.AggregateWith(p_2); :} 
  |  /* empty */  {: RESULT = new socialite.Absyn.NoAggregation(); :}
;
TypeName ::= _SYMB_19  {: RESULT = new socialite.Absyn.TypeInt(); :} 
;
Rule ::= Head:p_1 RuleBody:p_2 _SYMB_0  {: RESULT = new socialite.Absyn.RuleDef(p_1,p_2); :} 
;
ListRule ::=  /* empty */  {: RESULT = new socialite.Absyn.ListRule(); :} 
  | ListRule:p_1 Rule:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Head ::= UIdent:p_1 _SYMB_2 ListVariable:p_3 _SYMB_3  {: RESULT = new socialite.Absyn.HeadSingle(p_1,p_3); :} 
;
RuleBody ::= _SYMB_5 ListSubgoal:p_2  {: RESULT = new socialite.Absyn.RuleBodyDef(p_2); :} 
;
Predicate ::= UIdent:p_1 _SYMB_2 ListValue:p_3 _SYMB_3  {: RESULT = new socialite.Absyn.PredicateSingle(p_1,p_3); :} 
;
Subgoal ::= Predicate:p_1  {: RESULT = new socialite.Absyn.GoalPredicate(p_1); :} 
  | Exp:p_1 CompOp:p_2 Exp:p_3  {: RESULT = new socialite.Absyn.GoalComparison(p_1,p_2,p_3); :}
  | Variable:p_1 _SYMB_1 Exp:p_3  {: RESULT = new socialite.Absyn.GoalAssign(p_1,p_3); :}
;
ListSubgoal ::= Subgoal:p_1  {: RESULT = new socialite.Absyn.ListSubgoal(); RESULT.addLast(p_1); :} 
  | Subgoal:p_1 _SYMB_4 ListSubgoal:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Value ::= _INTEGER_:p_1  {: RESULT = new socialite.Absyn.ValueInt(p_1); :} 
  | Variable:p_1  {: RESULT = new socialite.Absyn.ValueVar(p_1); :}
  | _DOUBLE_:p_1  {: RESULT = new socialite.Absyn.ValueDouble(p_1); :}
  | UIdent:p_1  {: RESULT = new socialite.Absyn.ValueConst(p_1); :}
;
ListValue ::= Value:p_1  {: RESULT = new socialite.Absyn.ListValue(); RESULT.addLast(p_1); :} 
  | Value:p_1 _SYMB_4 ListValue:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Variable ::= LIdent:p_1  {: RESULT = new socialite.Absyn.Var(p_1); :} 
;
ListVariable ::= Variable:p_1  {: RESULT = new socialite.Absyn.ListVariable(); RESULT.addLast(p_1); :} 
  | Variable:p_1 _SYMB_4 ListVariable:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Function ::= UIdent:p_1  {: RESULT = new socialite.Absyn.Func(p_1); :} 
;
CompOp ::= _SYMB_6  {: RESULT = new socialite.Absyn.CompOpEq(); :} 
  | _SYMB_7  {: RESULT = new socialite.Absyn.CompOpNe(); :}
  | _SYMB_8  {: RESULT = new socialite.Absyn.CompOpGt(); :}
  | _SYMB_9  {: RESULT = new socialite.Absyn.CompOpLt(); :}
  | _SYMB_10  {: RESULT = new socialite.Absyn.CompOpGe(); :}
  | _SYMB_11  {: RESULT = new socialite.Absyn.CompOpLe(); :}
;
Exp ::= Exp:p_1 _SYMB_12 Exp1:p_3  {: RESULT = new socialite.Absyn.EAdd(p_1,p_3); :} 
  | Exp:p_1 _SYMB_13 Exp1:p_3  {: RESULT = new socialite.Absyn.ESub(p_1,p_3); :}
  | Exp1:p_1  {: RESULT = p_1; :}
;
Exp1 ::= Exp1:p_1 _SYMB_14 Exp2:p_3  {: RESULT = new socialite.Absyn.EMul(p_1,p_3); :} 
  | Exp1:p_1 _SYMB_15 Exp2:p_3  {: RESULT = new socialite.Absyn.EDiv(p_1,p_3); :}
  | Exp2:p_1  {: RESULT = p_1; :}
;
Exp2 ::= Value:p_1  {: RESULT = new socialite.Absyn.EValue(p_1); :} 
  | _SYMB_2 Exp:p_2 _SYMB_3  {: RESULT = p_2; :}
;

