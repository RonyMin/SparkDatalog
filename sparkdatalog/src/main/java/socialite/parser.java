
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Sep 25 19:38:09 CEST 2014
//----------------------------------------------------

package socialite;

import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Sep 25 19:38:09 CEST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\003\010\000\002\004\002\000\002\004\004" +
    "\000\002\005\002\000\002\005\005\000\002\006\005\000" +
    "\002\007\002\000\002\007\003\000\002\007\005\000\002" +
    "\010\004\000\002\010\002\000\002\011\003\000\002\012" +
    "\005\000\002\013\002\000\002\013\004\000\002\014\006" +
    "\000\002\015\004\000\002\016\006\000\002\017\003\000" +
    "\002\017\005\000\002\017\005\000\002\020\003\000\002" +
    "\020\005\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\022\003\000\002\022\005" +
    "\000\002\023\003\000\002\024\003\000\002\024\005\000" +
    "\002\025\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\027\005\000\002\027\005\000\002\027\003" +
    "\000\002\030\005\000\002\030\005\000\002\030\003\000" +
    "\002\031\003\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\012\002\ufffd\025\ufffd\026\ufffd\032\ufffd\001" +
    "\002\000\004\002\126\001\002\000\012\002\ufff1\025\010" +
    "\026\007\032\ufff1\001\002\000\012\002\ufffc\025\ufffc\026" +
    "\ufffc\032\ufffc\001\002\000\004\032\107\001\002\000\004" +
    "\027\101\001\002\000\006\002\000\032\014\001\002\000" +
    "\004\011\025\001\002\000\006\002\ufff0\032\ufff0\001\002" +
    "\000\004\006\015\001\002\000\004\033\017\001\002\000" +
    "\006\007\uffe0\010\022\001\002\000\040\004\uffe1\005\uffe1" +
    "\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\001\002\000\004\007\021\001\002\000\004\011\uffef\001" +
    "\002\000\004\033\017\001\002\000\004\007\uffdf\001\002" +
    "\000\004\004\100\001\002\000\014\006\031\030\036\031" +
    "\037\032\032\033\017\001\002\000\006\004\uffec\010\uffec" +
    "\001\002\000\030\005\076\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\001\002\000\006\004\uffe9\010\074\001\002\000\014\006" +
    "\031\030\036\031\037\032\046\033\017\001\002\000\030" +
    "\006\064\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\001\002\000\022" +
    "\012\052\013\051\014\050\015\060\016\057\017\056\020" +
    "\055\021\054\001\002\000\004\004\uffee\001\002\000\034" +
    "\004\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\001\002\000\034\004\uffe7\007\uffe7\010\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\001\002\000\034\004\uffe5\007\uffe5\010" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\001\002\000\034\004" +
    "\uffd2\007\uffd2\010\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\001" +
    "\002\000\034\004\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\043\023\042\001\002\000\014\006\031\030\036\031\037" +
    "\032\046\033\017\001\002\000\014\006\031\030\036\031" +
    "\037\032\046\033\017\001\002\000\034\004\uffd4\007\uffd4" +
    "\010\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\001\002\000\034" +
    "\004\uffe6\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\001\002\000\034\004\uffe4\007\uffe4\010\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\001\002\000\034\004\uffd3\007\uffd3\010" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\001\002\000\014\006" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\001\002\000\014" +
    "\006\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\001\002\000" +
    "\014\006\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\001\002" +
    "\000\014\006\031\030\036\031\037\032\046\033\017\001" +
    "\002\000\014\006\031\030\036\031\037\032\046\033\017" +
    "\001\002\000\014\006\031\030\036\031\037\032\046\033" +
    "\017\001\002\000\014\006\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\001\002\000\014\006\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\001\002\000\014\006\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\001\002\000\034\004\uffd7\007\uffd7\010" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\043\023\042\001\002\000\034\004" +
    "\uffd6\007\uffd6\010\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\043\023\042\001" +
    "\002\000\012\004\uffeb\010\uffeb\020\055\021\054\001\002" +
    "\000\012\030\036\031\037\032\046\033\017\001\002\000" +
    "\004\007\071\001\002\000\006\007\uffe3\010\067\001\002" +
    "\000\012\030\036\031\037\032\046\033\017\001\002\000" +
    "\004\007\uffe2\001\002\000\006\004\uffed\010\uffed\001\002" +
    "\000\010\007\073\020\055\021\054\001\002\000\034\004" +
    "\uffd0\007\uffd0\010\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\001" +
    "\002\000\014\006\031\030\036\031\037\032\032\033\017" +
    "\001\002\000\004\004\uffe8\001\002\000\014\006\031\030" +
    "\036\031\037\032\046\033\017\001\002\000\012\004\uffea" +
    "\010\uffea\020\055\021\054\001\002\000\006\002\ufff2\032" +
    "\ufff2\001\002\000\006\032\ufff3\033\ufff3\001\002\000\004" +
    "\032\103\001\002\000\004\005\104\001\002\000\014\006" +
    "\031\030\036\031\037\032\046\033\017\001\002\000\010" +
    "\004\106\020\055\021\054\001\002\000\012\002\ufffe\025" +
    "\ufffe\026\ufffe\032\ufffe\001\002\000\006\004\ufffb\006\111" +
    "\001\002\000\004\004\125\001\002\000\006\007\ufff8\027" +
    "\101\001\002\000\006\007\ufff7\010\123\001\002\000\004" +
    "\033\017\001\002\000\004\007\115\001\002\000\004\004" +
    "\ufffa\001\002\000\010\007\ufff4\010\ufff4\024\117\001\002" +
    "\000\004\032\122\001\002\000\006\007\ufff9\010\ufff9\001" +
    "\002\000\006\007\ufff5\010\ufff5\001\002\000\006\007\uffde" +
    "\010\uffde\001\002\000\006\007\ufff8\027\101\001\002\000" +
    "\004\007\ufff6\001\002\000\012\002\uffff\025\uffff\026\uffff" +
    "\032\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\006\003\005\013\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\101\001\001\000\006\012" +
    "\012\014\011\001\001\000\004\015\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\015\024\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\015\024\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\025\017\027" +
    "\020\033\021\034\023\026\027\032\030\040\031\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\021\034\023\044\027\071\030\040\031\037\001" +
    "\001\000\002\001\001\000\004\026\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\034" +
    "\023\044\031\046\001\001\000\010\021\034\023\044\031" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\021\034\023\044\027\062" +
    "\030\040\031\037\001\001\000\012\021\034\023\044\030" +
    "\061\031\037\001\001\000\012\021\034\023\044\030\060" +
    "\031\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\065\022\064\023\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\065\022\067" +
    "\023\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\025\017\027" +
    "\020\074\021\034\023\026\027\032\030\040\031\037\001" +
    "\001\000\002\001\001\000\014\021\034\023\044\027\076" +
    "\030\040\031\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\021\034\023\044\027\104\030\040\031\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\107" +
    "\001\001\000\002\001\001\000\010\006\111\007\113\011" +
    "\112\001\001\000\002\001\001\000\004\023\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\117\001" +
    "\001\000\004\025\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\111\007\123\011" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public socialite.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (socialite.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		socialite.Absyn.Program start_val = (socialite.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListDeclaration ListRule 
            {
              socialite.Absyn.Program RESULT =null;
		socialite.Absyn.ListDeclaration p_1 = (socialite.Absyn.ListDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		socialite.Absyn.ListRule p_2 = (socialite.Absyn.ListRule)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.Prog(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Declaration ::= _SYMB_18 UIdent MoreDimensionsDeclaration _SYMB_0 
            {
              socialite.Absyn.Declaration RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.MoreDimensionsDeclaration p_3 = (socialite.Absyn.MoreDimensionsDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new socialite.Absyn.DeclarationGlobal(p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declaration ::= _SYMB_17 TypeName UIdent _SYMB_1 Exp _SYMB_0 
            {
              socialite.Absyn.Declaration RESULT =null;
		socialite.Absyn.TypeName p_2 = (socialite.Absyn.TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		socialite.Absyn.Exp p_5 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new socialite.Absyn.DeclarationConst(p_2,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListDeclaration ::= 
            {
              socialite.Absyn.ListDeclaration RESULT =null;
		 RESULT = new socialite.Absyn.ListDeclaration(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDeclaration",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListDeclaration ::= ListDeclaration Declaration 
            {
              socialite.Absyn.ListDeclaration RESULT =null;
		socialite.Absyn.ListDeclaration p_1 = (socialite.Absyn.ListDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		socialite.Absyn.Declaration p_2 = (socialite.Absyn.Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListDeclaration",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MoreDimensionsDeclaration ::= 
            {
              socialite.Absyn.MoreDimensionsDeclaration RESULT =null;
		 RESULT = new socialite.Absyn.NoMoreDim(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MoreDimensionsDeclaration",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MoreDimensionsDeclaration ::= _SYMB_2 ListColumnDeclaration _SYMB_3 
            {
              socialite.Absyn.MoreDimensionsDeclaration RESULT =null;
		socialite.Absyn.ListColumnDeclaration p_2 = (socialite.Absyn.ListColumnDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new socialite.Absyn.MoreDim(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MoreDimensionsDeclaration",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ColumnDeclaration ::= TypeName Variable AggregateSpecifier 
            {
              socialite.Absyn.ColumnDeclaration RESULT =null;
		socialite.Absyn.TypeName p_1 = (socialite.Absyn.TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.Variable p_2 = (socialite.Absyn.Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		socialite.Absyn.AggregateSpecifier p_3 = (socialite.Absyn.AggregateSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ColumnDecl(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ColumnDeclaration",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ListColumnDeclaration ::= 
            {
              socialite.Absyn.ListColumnDeclaration RESULT =null;
		 RESULT = new socialite.Absyn.ListColumnDeclaration(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListColumnDeclaration",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListColumnDeclaration ::= ColumnDeclaration 
            {
              socialite.Absyn.ListColumnDeclaration RESULT =null;
		socialite.Absyn.ColumnDeclaration p_1 = (socialite.Absyn.ColumnDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ListColumnDeclaration(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListColumnDeclaration",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListColumnDeclaration ::= ColumnDeclaration _SYMB_4 ListColumnDeclaration 
            {
              socialite.Absyn.ListColumnDeclaration RESULT =null;
		socialite.Absyn.ColumnDeclaration p_1 = (socialite.Absyn.ColumnDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.ListColumnDeclaration p_3 = (socialite.Absyn.ListColumnDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListColumnDeclaration",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AggregateSpecifier ::= _SYMB_16 Function 
            {
              socialite.Absyn.AggregateSpecifier RESULT =null;
		socialite.Absyn.Function p_2 = (socialite.Absyn.Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.AggregateWith(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AggregateSpecifier",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AggregateSpecifier ::= 
            {
              socialite.Absyn.AggregateSpecifier RESULT =null;
		 RESULT = new socialite.Absyn.NoAggregation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AggregateSpecifier",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TypeName ::= _SYMB_19 
            {
              socialite.Absyn.TypeName RESULT =null;
		 RESULT = new socialite.Absyn.TypeInt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeName",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Rule ::= Head RuleBody _SYMB_0 
            {
              socialite.Absyn.Rule RESULT =null;
		socialite.Absyn.Head p_1 = (socialite.Absyn.Head)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.RuleBody p_2 = (socialite.Absyn.RuleBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new socialite.Absyn.RuleDef(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Rule",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ListRule ::= 
            {
              socialite.Absyn.ListRule RESULT =null;
		 RESULT = new socialite.Absyn.ListRule(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListRule",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ListRule ::= ListRule Rule 
            {
              socialite.Absyn.ListRule RESULT =null;
		socialite.Absyn.ListRule p_1 = (socialite.Absyn.ListRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		socialite.Absyn.Rule p_2 = (socialite.Absyn.Rule)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListRule",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Head ::= UIdent _SYMB_2 ListVariable _SYMB_3 
            {
              socialite.Absyn.Head RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		socialite.Absyn.ListVariable p_3 = (socialite.Absyn.ListVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new socialite.Absyn.HeadSingle(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Head",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RuleBody ::= _SYMB_5 ListSubgoal 
            {
              socialite.Absyn.RuleBody RESULT =null;
		socialite.Absyn.ListSubgoal p_2 = (socialite.Absyn.ListSubgoal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.RuleBodyDef(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RuleBody",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Predicate ::= UIdent _SYMB_2 ListValue _SYMB_3 
            {
              socialite.Absyn.Predicate RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		socialite.Absyn.ListValue p_3 = (socialite.Absyn.ListValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new socialite.Absyn.PredicateSingle(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Predicate",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Subgoal ::= Predicate 
            {
              socialite.Absyn.Subgoal RESULT =null;
		socialite.Absyn.Predicate p_1 = (socialite.Absyn.Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.GoalPredicate(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Subgoal",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Subgoal ::= Exp CompOp Exp 
            {
              socialite.Absyn.Subgoal RESULT =null;
		socialite.Absyn.Exp p_1 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.CompOp p_2 = (socialite.Absyn.CompOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		socialite.Absyn.Exp p_3 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.GoalComparison(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Subgoal",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Subgoal ::= Variable _SYMB_1 Exp 
            {
              socialite.Absyn.Subgoal RESULT =null;
		socialite.Absyn.Variable p_1 = (socialite.Absyn.Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.Exp p_3 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.GoalAssign(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Subgoal",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ListSubgoal ::= Subgoal 
            {
              socialite.Absyn.ListSubgoal RESULT =null;
		socialite.Absyn.Subgoal p_1 = (socialite.Absyn.Subgoal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ListSubgoal(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListSubgoal",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ListSubgoal ::= Subgoal _SYMB_4 ListSubgoal 
            {
              socialite.Absyn.ListSubgoal RESULT =null;
		socialite.Absyn.Subgoal p_1 = (socialite.Absyn.Subgoal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.ListSubgoal p_3 = (socialite.Absyn.ListSubgoal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListSubgoal",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Value ::= _INTEGER_ 
            {
              socialite.Absyn.Value RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ValueInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Value ::= Variable 
            {
              socialite.Absyn.Value RESULT =null;
		socialite.Absyn.Variable p_1 = (socialite.Absyn.Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ValueVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Value ::= _DOUBLE_ 
            {
              socialite.Absyn.Value RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ValueDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Value ::= UIdent 
            {
              socialite.Absyn.Value RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ValueConst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Value",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListValue ::= Value 
            {
              socialite.Absyn.ListValue RESULT =null;
		socialite.Absyn.Value p_1 = (socialite.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ListValue(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListValue",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListValue ::= Value _SYMB_4 ListValue 
            {
              socialite.Absyn.ListValue RESULT =null;
		socialite.Absyn.Value p_1 = (socialite.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.ListValue p_3 = (socialite.Absyn.ListValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListValue",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Variable ::= LIdent 
            {
              socialite.Absyn.Variable RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.Var(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListVariable ::= Variable 
            {
              socialite.Absyn.ListVariable RESULT =null;
		socialite.Absyn.Variable p_1 = (socialite.Absyn.Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ListVariable(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVariable",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListVariable ::= Variable _SYMB_4 ListVariable 
            {
              socialite.Absyn.ListVariable RESULT =null;
		socialite.Absyn.Variable p_1 = (socialite.Absyn.Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.ListVariable p_3 = (socialite.Absyn.ListVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListVariable",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Function ::= UIdent 
            {
              socialite.Absyn.Function RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.Func(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CompOp ::= _SYMB_6 
            {
              socialite.Absyn.CompOp RESULT =null;
		 RESULT = new socialite.Absyn.CompOpEq(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompOp",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CompOp ::= _SYMB_7 
            {
              socialite.Absyn.CompOp RESULT =null;
		 RESULT = new socialite.Absyn.CompOpNe(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompOp",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CompOp ::= _SYMB_8 
            {
              socialite.Absyn.CompOp RESULT =null;
		 RESULT = new socialite.Absyn.CompOpGt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompOp",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CompOp ::= _SYMB_9 
            {
              socialite.Absyn.CompOp RESULT =null;
		 RESULT = new socialite.Absyn.CompOpLt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompOp",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CompOp ::= _SYMB_10 
            {
              socialite.Absyn.CompOp RESULT =null;
		 RESULT = new socialite.Absyn.CompOpGe(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompOp",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CompOp ::= _SYMB_11 
            {
              socialite.Absyn.CompOp RESULT =null;
		 RESULT = new socialite.Absyn.CompOpLe(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompOp",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= Exp _SYMB_12 Exp1 
            {
              socialite.Absyn.Exp RESULT =null;
		socialite.Absyn.Exp p_1 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.Exp p_3 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.EAdd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp ::= Exp _SYMB_13 Exp1 
            {
              socialite.Absyn.Exp RESULT =null;
		socialite.Absyn.Exp p_1 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.Exp p_3 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.ESub(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp ::= Exp1 
            {
              socialite.Absyn.Exp RESULT =null;
		socialite.Absyn.Exp p_1 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp1 ::= Exp1 _SYMB_14 Exp2 
            {
              socialite.Absyn.Exp RESULT =null;
		socialite.Absyn.Exp p_1 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.Exp p_3 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.EMul(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp1 ::= Exp1 _SYMB_15 Exp2 
            {
              socialite.Absyn.Exp RESULT =null;
		socialite.Absyn.Exp p_1 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		socialite.Absyn.Exp p_3 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.EDiv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp1 ::= Exp2 
            {
              socialite.Absyn.Exp RESULT =null;
		socialite.Absyn.Exp p_1 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp2 ::= Value 
            {
              socialite.Absyn.Exp RESULT =null;
		socialite.Absyn.Value p_1 = (socialite.Absyn.Value)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new socialite.Absyn.EValue(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Exp2 ::= _SYMB_2 Exp _SYMB_3 
            {
              socialite.Absyn.Exp RESULT =null;
		socialite.Absyn.Exp p_2 = (socialite.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",23, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

